{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/tasks-sagas.ts","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/app-sagas.ts","app/App.tsx","app/store.ts","index.tsx","app/App.module.css","features/TodolistsList/Todolist/Todolist.module.css","features/TodolistsList/TodolistsList.module.css","features/TodolistsList/Todolist/Task/Task.module.css","features/Login/Login.module.css","components/AddItemForm/AddItemForm.module.css","components/EditableSpan/EditableSpan.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","initialState","status","error","isInitialized","setAppErrorAC","type","setAppStatusAC","handleServerAppErrorForSaga","handleServerNetworkErrorForSaga","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","className","s","addItemForm","TextField","variant","fullWidth","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","span","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","taskClass","doneTask","key","Checkbox","Clear","addTaskAC","updateTaskAC","setTasksAC","tasks","fetchTasksSaga","removeTaskSaga","addTaskSaga","updateTaskSaga","tasksWatcherSaga","action","call","res","items","resultCode","item","domainModel","select","state","find","t","console","warn","apiModel","deadline","description","priority","startDate","updateTask","takeEvery","Todolist","demo","useDispatch","useEffect","thunk","todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","containerRef","useRef","container","current","handleScroll","offsetHeight","scrollHeight","stopPropagation","addEventListener","removeEventListener","tasksForTodolist","filter","removeTodolist","entityStatus","Delete","ref","map","filterContainer","Button","TodolistsList","todolists","useSelector","isLoggedIn","auth","then","catch","handleRemoveTask","handleAddTask","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","todolistsContainerRef","pageRef","page","preventDefault","scrollLeft","deltaY","todolistList","addItemWrapper","todolistsContainer","tl","allTodolistTasks","Paper","elevation","todoListWrapper","to","Alert","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","setIsLoggedInAC","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","login","formHolder","handleSubmit","FormControl","FormLabel","Typography","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","initializeAppWorkerSaga","appWatcherSaga","App","logoutHandler","AppBar","position","Toolbar","toolbar","LinearProgress","main","exact","path","render","loaderHolder","CircularProgress","rootWatcher","rootReducer","combineReducers","todoListId","copyState","forEach","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunkMiddleware","all","run","setTimeout","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1a9c01d4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1cdd9f77-c60e-4af5-b194-659e4ebd5d41'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIED', value} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport function* handleServerAppErrorForSaga<D>(data: ResponseType<D>, put: any) {\r\n    if (data.messages.length) {\r\n        yield put(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        yield put(setAppErrorAC('Some error occurred'))\r\n    }\r\n    yield put(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport function* handleServerNetworkErrorForSaga(error: { message: string }, put: any) {\r\n    yield put(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    yield put(setAppStatusAC('failed'))\r\n}\r\n","import { todolistsAPI, TodolistType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport {\r\n  RequestStatusType,\r\n  SetAppErrorActionType,\r\n  setAppStatusAC,\r\n  SetAppStatusActionType,\r\n} from '../../app/app-reducer'\r\nimport { handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (\r\n  state: Array<TodolistDomainType> = initialState,\r\n  action: ActionsType\r\n): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODOLIST':\r\n      return state.filter(tl => tl.id !== action.id)\r\n    case 'ADD-TODOLIST':\r\n      return [{ ...action.todolist, filter: 'all', entityStatus: 'idle' }, ...state]\r\n\r\n    case 'CHANGE-TODOLIST-TITLE':\r\n      return state.map(tl => (tl.id === action.id ? { ...tl, title: action.title } : tl))\r\n    case 'CHANGE-TODOLIST-FILTER':\r\n      return state.map(tl => (tl.id === action.id ? { ...tl, filter: action.filter } : tl))\r\n    case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n      return state.map(tl => (tl.id === action.id ? { ...tl, entityStatus: action.status } : tl))\r\n    case 'SET-TODOLISTS':\r\n      return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n  ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n  ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title,\r\n  } as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n  ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter,\r\n  } as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) =>\r\n  ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    status,\r\n  } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n  ({ type: 'SET-TODOLISTS', todolists } as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n  return (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI\r\n      .getTodolists()\r\n      .then(res => {\r\n        dispatch(setTodolistsAC(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      })\r\n      .catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n      })\r\n  }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n  return (dispatch: ThunkDispatch) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatusAC('loading'))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistsAPI.deleteTodolist(todolistId).then(res => {\r\n      dispatch(removeTodolistAC(todolistId))\r\n      //скажем глобально приложению, что асинхронная операция завершена\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n  }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n  return (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title).then(res => {\r\n      dispatch(addTodolistAC(res.data.data.item))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n  }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.updateTodolist(id, title).then(res => {\r\n      dispatch(changeTodolistTitleAC(id, title))\r\n    })\r\n  }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\ntype ActionsType =\r\n  | RemoveTodolistActionType\r\n  | AddTodolistActionType\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>\r\n  | SetTodolistsActionType\r\n  | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\nimport { IconButton, TextField } from '@material-ui/core'\r\nimport { AddBox } from '@material-ui/icons'\r\nimport s from './AddItemForm.module.css'\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({\r\n  addItem,\r\n  disabled = false,\r\n}: AddItemFormPropsType) {\r\n  let [title, setTitle] = useState('')\r\n  let [error, setError] = useState<string | null>(null)\r\n\r\n  const addItemHandler = () => {\r\n    if (title.trim() !== '') {\r\n      addItem(title)\r\n      setTitle('')\r\n    } else {\r\n      setError('Title is required')\r\n    }\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null)\r\n    }\r\n    if (e.charCode === 13) {\r\n      addItemHandler()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.addItemForm}>\r\n      <TextField\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        disabled={disabled}\r\n        error={!!error}\r\n        value={title}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        label=\"Title\"\r\n        helperText={error}\r\n      />\r\n      <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n})\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport { TextField } from '@material-ui/core'\r\nimport s from './EditableSpan.module.css'\r\n\r\ntype EditableSpanPropsType = {\r\n  value: string\r\n  onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n  let [editMode, setEditMode] = useState(false)\r\n  let [title, setTitle] = useState(props.value)\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n    setTitle(props.value)\r\n  }\r\n  const activateViewMode = () => {\r\n    setEditMode(false)\r\n    props.onChange(title)\r\n  }\r\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  return editMode ? (\r\n    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n  ) : (\r\n    <span onDoubleClick={activateEditMode} className={s.span}>\r\n      {props.value}\r\n    </span>\r\n  )\r\n})\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Clear } from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\nimport s from './Task.module.css'\r\n\r\ntype TaskPropsType = {\r\n  task: TaskType\r\n  todolistId: string\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const onClickHandler = useCallback(\r\n    () => props.removeTask(props.task.id, props.todolistId),\r\n    [props.task.id, props.todolistId]\r\n  )\r\n\r\n  const onChangeHandler = useCallback(\r\n    (e: ChangeEvent<HTMLInputElement>) => {\r\n      let newIsDoneValue = e.currentTarget.checked\r\n      props.changeTaskStatus(\r\n        props.task.id,\r\n        newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n        props.todolistId\r\n      )\r\n    },\r\n    [props.task.id, props.todolistId]\r\n  )\r\n\r\n  const onTitleChangeHandler = useCallback(\r\n    (newValue: string) => {\r\n      props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    },\r\n    [props.task.id, props.todolistId]\r\n  )\r\n\r\n  const taskClass =\r\n    props.task.status === TaskStatuses.Completed ? `${s.task} ${s.doneTask}` : s.task\r\n\r\n  return (\r\n    <div key={props.task.id} className={taskClass}>\r\n      <div>\r\n        <Checkbox\r\n          checked={props.task.status === TaskStatuses.Completed}\r\n          color=\"primary\"\r\n          onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\r\n      </div>\r\n      <IconButton onClick={onClickHandler}>\r\n        <Clear />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n})\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {\r\n  handleServerAppError,\r\n  handleServerAppErrorForSaga,\r\n  handleServerNetworkError,\r\n  handleServerNetworkErrorForSaga\r\n} from '../../utils/error-utils'\r\nimport {AxiosError} from \"axios\";\r\nimport {select} from 'redux-saga/effects'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK':\r\n      return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n    case 'ADD-TASK':\r\n      return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n    case 'UPDATE-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId]\r\n          .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n      }\r\n    case 'ADD-TODOLIST':\r\n      return {...state, [action.todolist.id]: []}\r\n    case 'REMOVE-TODOLIST':\r\n      const copyState = {...state}\r\n      delete copyState[action.id]\r\n      return copyState\r\n    case 'SET-TODOLISTS': {\r\n      const copyState = {...state}\r\n      action.todolists.forEach(tl => {\r\n        copyState[tl.id] = []\r\n      })\r\n      return copyState\r\n    }\r\n    case 'SET-TASKS':\r\n      return {...state, [action.todolistId]: action.tasks}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n  ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n  ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n  ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n  ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n\r\n\r\n// thunks\r\n// export const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n//   (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n//     const state = getState()\r\n//     const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n//     if (!task) {\r\n//       //throw new Error(\"task not found in the state\");\r\n//       console.warn('task not found in the state')\r\n//       return\r\n//     }\r\n//\r\n//     const apiModel: UpdateTaskModelType = {\r\n//       deadline: task.deadline,\r\n//       description: task.description,\r\n//       priority: task.priority,\r\n//       startDate: task.startDate,\r\n//       title: task.title,\r\n//       status: task.status,\r\n//       ...domainModel\r\n//     }\r\n//\r\n//     todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n//       .then(res => {\r\n//         if (res.data.resultCode === 0) {\r\n//           const action = updateTaskAC(taskId, domainModel, todolistId)\r\n//           dispatch(action)\r\n//         } else {\r\n//           handleServerAppError(res.data, dispatch);\r\n//         }\r\n//       })\r\n//       .catch((error) => {\r\n//         handleServerNetworkError(error, dispatch);\r\n//       })\r\n//   }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | AddTodolistActionType\r\n  | RemoveTodolistActionType\r\n  | SetTodolistsActionType\r\n  | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {call, put, select, takeEvery} from \"redux-saga/effects\";\r\nimport {todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {\r\n  addTaskAC,\r\n  removeTaskAC,\r\n  setTasksAC,\r\n  TasksStateType,\r\n  UpdateDomainTaskModelType,\r\n  updateTaskAC\r\n} from \"./tasks-reducer\";\r\nimport {handleServerAppErrorForSaga, handleServerNetworkErrorForSaga} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport function* fetchTasksSaga(action: any) {\r\n  yield put(setAppStatusAC('loading'))\r\n  const res = yield call(todolistsAPI.getTasks, action.todolistId)\r\n  const tasks = res.data.items\r\n  yield put(setTasksAC(tasks, action.todolistId))\r\n  yield put(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport const fetchTasks = (todolistId: string) => ({type: 'TASKS/FETCH-TASKS', todolistId})\r\n\r\nexport function* removeTaskSaga(action: any) {\r\n  yield call(todolistsAPI.deleteTask, action.todolistId, action.taskId)\r\n  yield put(removeTaskAC(action.taskId, action.todolistId))\r\n}\r\n\r\nexport const removeTask = (taskId: string, todolistId: string) => ({\r\n  type: 'TASKS/REMOVE-TASK',\r\n  todolistId,\r\n  taskId\r\n})\r\n\r\nexport function* addTaskSaga(action: any) {\r\n  try {\r\n    yield put(setAppStatusAC('loading'))\r\n    const res = yield call(todolistsAPI.createTask, action.todolistId, action.title)\r\n    if (res.data.resultCode === 0) {\r\n      const task = res.data.data.item\r\n      yield put(addTaskAC(task))\r\n      yield put(setAppStatusAC('succeeded'))\r\n    } else {\r\n      handleServerAppErrorForSaga(res.data, put);\r\n    }\r\n  } catch (e) {\r\n    handleServerNetworkErrorForSaga(e as AxiosError, put)\r\n  }\r\n}\r\n\r\nexport const addTask = (title: string, todolistId: string) => ({type: 'TASKS/ADD-TASK', title, todolistId})\r\n\r\nexport function* updateTaskSaga({taskId, domainModel, todolistId}: any) {\r\n  try {\r\n    const tasks: TasksStateType = yield select(state => state.tasks)\r\n    const task = tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n      //throw new Error(\"task not found in the state\");\r\n      console.warn('task not found in the state')\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...domainModel\r\n    }\r\n\r\n    const res = yield call(todolistsAPI.updateTask, todolistId, taskId, apiModel)\r\n    if (res.data.resultCode === 0) {\r\n      const action = updateTaskAC(taskId, domainModel, todolistId)\r\n      yield put(action)\r\n    } else {\r\n      handleServerAppErrorForSaga(res.data, put);\r\n    }\r\n  } catch (e) {\r\n    handleServerNetworkErrorForSaga(e, put);\r\n  }\r\n}\r\n\r\nexport const updateTask = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => ({\r\n  type: 'TASKS/UPDATE-TASK',\r\n  taskId,\r\n  domainModel,\r\n  todolistId\r\n})\r\n\r\nexport function* tasksWatcherSaga() {\r\n  yield takeEvery('TASKS/FETCH-TASKS', fetchTasksSaga)\r\n  yield takeEvery('TASKS/REMOVE-TASK', removeTaskSaga)\r\n  yield takeEvery('TASKS/ADD-TASK', addTaskSaga)\r\n  yield takeEvery('TASKS/UPDATE-TASK', updateTaskSaga)\r\n}","import React, { useCallback, useEffect, useRef } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasks } from '../tasks-sagas'\r\nimport s from './Todolist.module.css'\r\n\r\ntype PropsType = {\r\n  todolist: TodolistDomainType\r\n  tasks: Array<TaskType>\r\n  changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n  addTask: (title: string, todolistId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n  removeTodolist: (id: string) => void\r\n  changeTodolistTitle: (id: string, newTitle: string) => void\r\n  demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ demo = false, ...props }: PropsType) {\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (demo) {\r\n      return\r\n    }\r\n    const thunk = fetchTasks(props.todolist.id)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTask = useCallback(\r\n    (title: string) => {\r\n      props.addTask(title, props.todolist.id)\r\n    },\r\n    [props.addTask, props.todolist.id]\r\n  )\r\n\r\n  const removeTodolist = () => {\r\n    props.removeTodolist(props.todolist.id)\r\n  }\r\n  const changeTodolistTitle = useCallback(\r\n    (title: string) => {\r\n      props.changeTodolistTitle(props.todolist.id, title)\r\n    },\r\n    [props.todolist.id, props.changeTodolistTitle]\r\n  )\r\n\r\n  const onAllClickHandler = useCallback(\r\n    () => props.changeFilter('all', props.todolist.id),\r\n    [props.todolist.id, props.changeFilter]\r\n  )\r\n  const onActiveClickHandler = useCallback(\r\n    () => props.changeFilter('active', props.todolist.id),\r\n    [props.todolist.id, props.changeFilter]\r\n  )\r\n  const onCompletedClickHandler = useCallback(\r\n    () => props.changeFilter('completed', props.todolist.id),\r\n    [props.todolist.id, props.changeFilter]\r\n  )\r\n\r\n  const containerRef = useRef<HTMLDivElement>(null)\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current\r\n    const handleScroll = (e: WheelEvent) => {\r\n      if (container!.offsetHeight !== container!.scrollHeight) {\r\n        e.stopPropagation()\r\n      }\r\n    }\r\n    container!.addEventListener('wheel', handleScroll)\r\n\r\n    return () => {\r\n      container!.removeEventListener('wheel', handleScroll)\r\n    }\r\n  }, [])\r\n\r\n  let tasksForTodolist = props.tasks\r\n\r\n  if (props.todolist.filter === 'active') {\r\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n  }\r\n  if (props.todolist.filter === 'completed') {\r\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n  }\r\n\r\n  return (\r\n    <div className={s.todolist}>\r\n      <h3 className={s.title}>\r\n        <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} />\r\n        <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n          <Delete />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} />\r\n      <div ref={containerRef} className={s.tasks}>\r\n        {tasksForTodolist.map(t => (\r\n          <Task\r\n            key={t.id}\r\n            task={t}\r\n            todolistId={props.todolist.id}\r\n            removeTask={props.removeTask}\r\n            changeTaskTitle={props.changeTaskTitle}\r\n            changeTaskStatus={props.changeTaskStatus}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className={s.filterContainer}>\r\n        <Button\r\n          variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n          onClick={onAllClickHandler}\r\n          color={'default'}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n          onClick={onActiveClickHandler}\r\n          color={'primary'}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n          onClick={onCompletedClickHandler}\r\n          color={'secondary'}\r\n        >\r\n          Completed\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n","import React, { useCallback, useEffect, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n  addTodolistTC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  fetchTodolistsTC,\r\n  FilterValuesType,\r\n  removeTodolistTC,\r\n  TodolistDomainType,\r\n} from './todolists-reducer'\r\nimport { TasksStateType } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { Paper } from '@material-ui/core'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { addTask, removeTask, updateTask } from './tasks-sagas'\r\nimport s from './TodolistsList.module.css'\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(\r\n    state => state.todolists\r\n  )\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (demo || !isLoggedIn) {\r\n      return\r\n    }\r\n    const thunk = fetchTodolistsTC()\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const handleRemoveTask = useCallback(function (id: string, todolistId: string) {\r\n    dispatch(removeTask(id, todolistId))\r\n  }, [])\r\n\r\n  const handleAddTask = useCallback(function (title: string, todolistId: string) {\r\n    dispatch(addTask(title, todolistId))\r\n  }, [])\r\n\r\n  const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n    const thunk = updateTask(id, { status }, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n    const thunk = updateTask(id, { title: newTitle }, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n    const action = changeTodolistFilterAC(todolistId, value)\r\n    dispatch(action)\r\n  }, [])\r\n\r\n  const removeTodolist = useCallback(function (id: string) {\r\n    const thunk = removeTodolistTC(id)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n    const thunk = changeTodolistTitleTC(id, title)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTodolist = useCallback(\r\n    (title: string) => {\r\n      const thunk = addTodolistTC(title)\r\n      dispatch(thunk)\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const todolistsContainerRef = useRef<HTMLDivElement>(null)\r\n  const pageRef = useRef<HTMLDivElement>(null)\r\n\r\n  useEffect(() => {\r\n    const container = todolistsContainerRef.current\r\n    const page = pageRef.current\r\n\r\n    const handleScroll = (e: WheelEvent) => {\r\n      e.preventDefault()\r\n      container!.scrollLeft += e.deltaY\r\n    }\r\n    page!.addEventListener('wheel', handleScroll)\r\n\r\n    return () => {\r\n      page!.removeEventListener('wheel', handleScroll)\r\n    }\r\n  }, [])\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={'/login'} />\r\n  }\r\n\r\n  return (\r\n    <div ref={pageRef} className={s.todolistList}>\r\n      <div className={s.addItemWrapper}>\r\n        <AddItemForm addItem={addTodolist} />\r\n      </div>\r\n      <div ref={todolistsContainerRef} className={s.todolistsContainer}>\r\n        {todolists.map(tl => {\r\n          let allTodolistTasks = tasks[tl.id]\r\n\r\n          return (\r\n            <Paper key={tl.id} elevation={3} className={s.todoListWrapper}>\r\n              <Todolist\r\n                todolist={tl}\r\n                tasks={allTodolistTasks}\r\n                removeTask={handleRemoveTask}\r\n                changeFilter={changeFilter}\r\n                addTask={handleAddTask}\r\n                changeTaskStatus={changeStatus}\r\n                removeTodolist={removeTodolist}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n                demo={demo}\r\n              />\r\n            </Paper>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React from 'react'\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport { useFormik } from 'formik'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loginTC } from './auth-reducer'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\nimport s from './Login.module.css'\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const formik = useFormik({\r\n    validate: values => {\r\n      if (!values.email) {\r\n        return {\r\n          email: 'Email is required',\r\n        }\r\n      }\r\n      if (!values.password) {\r\n        return {\r\n          password: 'Password is required',\r\n        }\r\n      }\r\n    },\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values))\r\n    },\r\n  })\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={'/'} />\r\n  }\r\n\r\n  return (\r\n    <div className={s.login}>\r\n      <Paper className={s.formHolder}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormLabel>\r\n              <Typography variant=\"h4\" className={s.title}>\r\n                SIGN IN\r\n              </Typography>\r\n              <p>To log in use common test account credentials:</p>\r\n              <p> Email: free@samuraijs.com</p>\r\n              <p>Password: free</p>\r\n            </FormLabel>\r\n            <FormGroup>\r\n              <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')} />\r\n              {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps('password')}\r\n              />\r\n              {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n              <FormControlLabel\r\n                label={'Remember me'}\r\n                control={\r\n                  <Checkbox\r\n                    {...formik.getFieldProps('rememberMe')}\r\n                    checked={formik.values.rememberMe}\r\n                  />\r\n                }\r\n              />\r\n              <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n","import {call, put, takeEvery} from \"redux-saga/effects\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {setAppInitializedAC} from \"./app-reducer\";\r\n\r\nexport function* initializeAppWorkerSaga() {\r\n  const res = yield call(authAPI.me)\r\n  if (res.data.resultCode === 0) {\r\n    yield put(setIsLoggedInAC(true))\r\n  }\r\n\r\n  yield put(setAppInitializedAC(true))\r\n}\r\n\r\nexport const initializeApp = () => ({\r\n  type: 'APP/INITIALIZE-APP'\r\n})\r\n\r\nexport function* appWatcherSaga() {\r\n  yield takeEvery('APP/INITIALIZE-APP', initializeAppWorkerSaga)\r\n}","import React, { useCallback, useEffect } from 'react'\r\nimport s from './App.module.css'\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  CircularProgress,\r\n  LinearProgress,\r\n  Toolbar,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { RequestStatusType } from './app-reducer'\r\nimport { Route } from 'react-router-dom'\r\nimport { Login } from '../features/Login/Login'\r\nimport { logoutTC } from '../features/Login/auth-reducer'\r\nimport { initializeApp } from './app-sagas'\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n  const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n\r\n  const logoutHandler = useCallback(() => {\r\n    dispatch(logoutTC())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeApp())\r\n  }, [])\r\n\r\n  if (!isInitialized) {\r\n    return (\r\n      <div className={s.loaderHolder}>\r\n        <CircularProgress />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={s.app}>\r\n      <ErrorSnackbar />\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={s.toolbar}>\r\n          <Typography variant=\"h6\">Todo</Typography>\r\n          {isLoggedIn && (\r\n            <Button color=\"inherit\" onClick={logoutHandler}>\r\n              Log out\r\n            </Button>\r\n          )}\r\n        </Toolbar>\r\n        {status === 'loading' && <LinearProgress />}\r\n      </AppBar>\r\n      <main className={s.main}>\r\n        <Route exact path={'/'} render={() => <TodolistsList demo={demo} />} />\r\n        <Route path={'/login'} render={() => <Login />} />\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {takeEvery, all} from 'redux-saga/effects'\r\nimport {fetchTasksSaga, removeTaskSaga, tasksWatcherSaga} from \"../features/TodolistsList/tasks-sagas\";\r\nimport {appWatcherSaga, initializeAppWorkerSaga} from \"./app-sagas\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, sagaMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nsagaMiddleware.run(rootWatcher)\r\n\r\nfunction* rootWatcher() {\r\n    yield all([appWatcherSaga(), tasksWatcherSaga()])\r\n}\r\n\r\nfunction* rootWorker() {\r\n    alert('rootWorker')\r\n}\r\n\r\nsetTimeout(() => {\r\n    // @ts-ignore\r\n    store.dispatch({type: 'ACTIVATOR-ACTION-TYPE'})\r\n}, 2000)\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './app/App'\r\nimport { store } from './app/store'\r\nimport { Provider } from 'react-redux'\r\nimport { HashRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__32UaZ\",\"loaderHolder\":\"App_loaderHolder__3pQK7\",\"toolbar\":\"App_toolbar__3W_0k\",\"main\":\"App_main__3K7jg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__1BVIE\",\"title\":\"Todolist_title__ooL8J\",\"tasks\":\"Todolist_tasks__huMFy\",\"filterContainer\":\"Todolist_filterContainer__aQXm1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistList\":\"TodolistsList_todolistList__3hR2M\",\"addItemWrapper\":\"TodolistsList_addItemWrapper__15VJf\",\"todolistsContainer\":\"TodolistsList_todolistsContainer__1Uyns\",\"todoListWrapper\":\"TodolistsList_todoListWrapper__5IPG_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__1oaKZ\",\"doneTask\":\"Task_doneTask__3KisC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__brV_2\",\"formHolder\":\"Login_formHolder__3_N28\",\"title\":\"Login_title__FmMyS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemForm\":\"AddItemForm_addItemForm__21vCs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"EditableSpan_span__Ndqkr\"};"],"sourceRoot":""}